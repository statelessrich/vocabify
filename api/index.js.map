{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.jsx", "../app/env.server.js", "../app/root.jsx", "../app/routes/index.jsx", "../app/components/input/Input.js", "../app/api/prompt.js", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/docs/en/main/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\nimport { getEnv } from \"./env.server\";\n\nglobal.ENV = getEnv();\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request,\n  responseStatusCode,\n  responseHeaders,\n  remixContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request,\n  responseStatusCode,\n  responseHeaders,\n  remixContext\n) {\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n\n      {\n        onAllReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error) {\n          reject(error);\n        },\n        onError(error) {\n          responseStatusCode = 500;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request,\n  responseStatusCode,\n  responseHeaders,\n  remixContext\n) {\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n\n      {\n        onShellReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error) {\n          reject(error);\n        },\n        onError(error) {\n          console.error(error);\n          responseStatusCode = 500;\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "export function getEnv() {\r\n  return {\r\n    OPENAI_API_KEY: process.env.OPENAI_API_KEY,\r\n  };\r\n}\r\n", "import { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useLoaderData } from \"@remix-run/react\";\nimport { getEnv } from \"./env.server\";\n\nexport const meta = () => ({\n  charset: \"utf-8\",\n  title: \"wordbot\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\n// write remix LoaderFunction\nexport const loader = async ({ request }) => {\n  // console.log(ENV);\n  return {\n    ENV: getEnv(),\n  };\n};\n\nexport default function App() {\n  const data = useLoaderData();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <script dangerouslySetInnerHTML={{ __html: `window.ENV=${JSON.stringify(data.ENV)}` }} />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import Input from \"../components/input/Input\";\nimport styles from \"~/index.css\";\n\nexport function links() {\n  return [\n    {\n      rel: \"stylesheet\",\n      href: styles,\n    },\n  ];\n}\n\nexport default function Index() {\n  // console.log(ENV);\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>wordbot</h1>\n      </div>\n\n      <div className=\"main\">\n        <Input />\n      </div>\n    </div>\n  );\n}\n", "import { useEffect, useState } from \"react\";\r\nimport \"regenerator-runtime\";\r\nimport { createSpeechlySpeechRecognition } from \"@speechly/speech-recognition-polyfill\";\r\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\r\nimport submitPrompt from \"../../api/prompt\";\r\nimport BarLoader from \"react-spinners/BarLoader\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\n\r\n// use speechly polyfill for browser support\r\nconst appId = \"c95dfa5c-ef43-437c-8400-f64515f67846\";\r\nconst SpeechlySpeechRecognition = createSpeechlySpeechRecognition(appId);\r\nSpeechRecognition.applyPolyfill(SpeechlySpeechRecognition);\r\n\r\nfunction Input() {\r\n  //   console.log(ENV);\r\n  const [speech, setSpeech] = useState(\"hibernation\");\r\n  const [response, setResponse] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { transcript, resetTranscript, listening, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n\r\n  useEffect(() => {\r\n    // when user says word, save word and turn off mic.\r\n    if (transcript) {\r\n      setSpeech(transcript);\r\n      SpeechRecognition.stopListening();\r\n    }\r\n  }, [transcript]);\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <span>Browser doesn't support speech recognition.</span>;\r\n  }\r\n\r\n  async function onSubmit() {\r\n    setResponse(\"\");\r\n    setIsLoading(true);\r\n\r\n    // submit openai prompt\r\n    try {\r\n      const response = await submitPrompt(speech);\r\n      const formattedResult = JSON.parse(response.replace(/\\n/g, \"\"));\r\n      setResponse(formattedResult);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setIsLoading(false);\r\n      //   setShowError(true);\r\n    }\r\n  }\r\n\r\n  function reset() {\r\n    setSpeech(\"\");\r\n    setResponse(\"\");\r\n    resetTranscript();\r\n    SpeechRecognition.stopListening();\r\n  }\r\n\r\n  // Return a JSX element that displays the speech and a button to start listening\r\n  return (\r\n    <div className=\"input\">\r\n      <h2>gimme a word.</h2>\r\n\r\n      <div>\r\n        <button onClick={SpeechRecognition.startListening} disabled={listening}>\r\n          record\r\n        </button>\r\n        {/* <button onClick={SpeechRecognition.stopListening} disabled={!listening}>\r\n        Stop\r\n      </button> */}\r\n        <button onClick={reset} disabled={!speech}>\r\n          reset\r\n        </button>\r\n      </div>\r\n\r\n      {listening && <div className=\"listening\">listening...</div>}\r\n\r\n      <div className=\"input-container\">\r\n        <div className=\"word\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"word-input\"\r\n            value={speech}\r\n            onChange={(e) => setSpeech(e.target.value)}\r\n          />\r\n        </div>\r\n        <button className=\"submit-btn\" onClick={onSubmit} disabled={isLoading || !speech}>\r\n          submit\r\n        </button>\r\n      </div>\r\n\r\n      {/* {isLoading && <BarLoader color=\"#36d7b7\" />} */}\r\n      {/* <PacmanLoader color=\"#484848\" /> */}\r\n\r\n      {isLoading && <div className=\"loading\">loading...</div>}\r\n\r\n      <div className=\"response\">{response.definition}</div>\r\n      <br />\r\n      <div className=\"response\">{response.example}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Export the component\r\nexport default Input;\r\n", "import { Configuration, OpenAIApi } from \"openai\";\r\n\r\nconst configuration = new Configuration({\r\n  apiKey: ENV.OPENAI_API_KEY,\r\n});\r\nconst openai = new OpenAIApi(configuration);\r\n\r\nexport default async function submitPrompt(word = \"\") {\r\n  if (!configuration.apiKey) {\r\n    //   error: {\r\n    //     message: \"OpenAI API key not configured, please follow instructions in README.md\",\r\n    //   },\r\n    return;\r\n  }\r\n\r\n  if (word.trim().length === 0) {\r\n    return Promise.reject({ message: \"Please enter a valid word\" });\r\n  }\r\n\r\n  try {\r\n    const test = 0;\r\n\r\n    if (test) {\r\n      //   res.status(200).json({\r\n      //     result: ``,\r\n      //   });\r\n      //   return;\r\n    }\r\n\r\n    const completion = await openai.createCompletion({\r\n      model: \"text-davinci-003\",\r\n      prompt: generatePrompt(word),\r\n      temperature: 0.3,\r\n      max_tokens: 3000,\r\n    });\r\n\r\n    // console.log(completion.data.choices[0]);\r\n    return completion.data.choices[0].text;\r\n    // res.status(200).json({ result: completion.data.choices[0].text });\r\n  } catch (error) {\r\n    // Consider adjusting the error handling logic for your use case\r\n    if (error.response) {\r\n      console.error(error.response.status, error.response.data);\r\n      //   res.status(error.response.status).json(error.response.data);\r\n    } else {\r\n      console.error(`Error with OpenAI API request: ${error.message}`);\r\n      //   res.status(500).json({\r\n      //     error: {\r\n      //       message: \"An error occurred during your request.\",\r\n      //     },\r\n      //   });\r\n    }\r\n  }\r\n}\r\n\r\nfunction generatePrompt(word) {\r\n  return `Define the word ${word}. Then give me an example of its use in a sentence. Use proper grammar and punctuation. \r\n  \r\n  Return in json format like: {\"definition\": \"<definition>\", \"example\": \"Example: <example>\"}`;\r\n}\r\n// Word: Quixotic.Definition: Having or showing ideas, plans, etc., that are not practical or sensible, but   that are hoped for and believed in anyway.\r\n// Example: He had a quixotic plan to build a time machine.`;\r\n", "export default {'version':'f707550e','entry':{'module':'/build/entry.client-QMNOJLGV.js','imports':['/build/_shared/chunk-NGYIO6PS.js','/build/_shared/chunk-56THQXCK.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-TSJOV2BX.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-TWMIPHTB.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'cssBundleHref':undefined,'hmr':undefined,'url':'/build/manifest-F707550E.js'};", "\nimport * as entryServer from \"C:\\\\workspace\\\\wordbot\\\\app\\\\entry.server.jsx\";\nimport * as route0 from \"./root.jsx\";\nimport * as route1 from \"./routes\\\\index.jsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public\\\\build\";\n  export const future = {\"unstable_cssModules\":false,\"unstable_cssSideEffectImports\":false,\"unstable_dev\":false,\"unstable_postcss\":false,\"unstable_tailwind\":false,\"unstable_vanillaExtract\":false,\"v2_errorBoundary\":false,\"v2_meta\":false,\"v2_routeConvention\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  \n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": "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",
  "names": ["isbot", "import_react", "import_jsx_dev_runtime", "import_react", "import_jsx_dev_runtime", "SpeechRecognition", "response", "import_jsx_dev_runtime"]
}
